!function(t,i){"object"==typeof exports&&"undefined"!=typeof module?i(exports):"function"==typeof define&&define.amd?define(["exports"],i):i((t="undefined"!=typeof globalThis?globalThis:t||self).MaplibreGrid={})}(this,(function(t){"use strict";function i(t,i){for(var e=0;e<i.length;e++){var r=i[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var e=6371008.8,r={centimeters:637100880,centimetres:637100880,degrees:57.22891354143274,feet:20902260.511392,inches:39.37*e,kilometers:6371.0088,kilometres:6371.0088,meters:e,metres:e,miles:3958.761333810546,millimeters:6371008800,millimetres:6371008800,nauticalmiles:e/1852,radians:1,yards:5825721.287490856};function o(t){return 180*(t%(2*Math.PI))/Math.PI}function n(t){return t%360*Math.PI/180}function a(t){return!isNaN(t)&&null!==t&&!Array.isArray(t)}function s(t){if(!t)throw new Error("coord is required");if(!Array.isArray(t)){if("Feature"===t.type&&null!==t.geometry&&"Point"===t.geometry.type)return t.geometry.coordinates;if("Point"===t.type)return t.coordinates}if(Array.isArray(t)&&t.length>=2&&!Array.isArray(t[0])&&!Array.isArray(t[1]))return t;throw new Error("coord must be GeoJSON Point or an Array of numbers")}function u(t,i,e){void 0===e&&(e={});var o=s(t),a=s(i),u=n(a[1]-o[1]),h=n(a[0]-o[0]),c=n(o[1]),d=n(a[1]),f=Math.pow(Math.sin(u/2),2)+Math.pow(Math.sin(h/2),2)*Math.cos(c)*Math.cos(d);return function(t,i){void 0===i&&(i="kilometers");var e=r[i];if(!e)throw new Error(i+" units is invalid");return t*e}(2*Math.atan2(Math.sqrt(f),Math.sqrt(1-f)),e.units)}function h(t,i,e,u){void 0===u&&(u={});var h=s(t),c=n(h[0]),d=n(h[1]),f=n(e),l=function(t,i){void 0===i&&(i="kilometers");var e=r[i];if(!e)throw new Error(i+" units is invalid");return t/e}(i,u.units),m=Math.asin(Math.sin(d)*Math.cos(l)+Math.cos(d)*Math.sin(l)*Math.cos(f));return function(t,i,e){if(void 0===e&&(e={}),!t)throw new Error("coordinates is required");if(!Array.isArray(t))throw new Error("coordinates must be an Array");if(t.length<2)throw new Error("coordinates must be at least 2 numbers long");if(!a(t[0])||!a(t[1]))throw new Error("coordinates must contain numbers");return function(t,i,e){void 0===e&&(e={});var r={type:"Feature"};return(0===e.id||e.id)&&(r.id=e.id),e.bbox&&(r.bbox=e.bbox),r.properties=i||{},r.geometry=t,r}({type:"Point",coordinates:t},i,e)}([o(c+Math.atan2(Math.sin(f)*Math.sin(l)*Math.cos(d),Math.cos(l)-Math.sin(d)*Math.sin(m))),o(m)],u.properties)}var c="grid.click";function d(){return Math.floor(1e13*Math.random()).toString(36)}var f=function(){function t(i){!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id="grid-".concat(d()),this.config=i,this.updateBound=this.update.bind(this),this.onMapClickBound=this.onMapClick.bind(this)}var e,r,o;return e=t,(r=[{key:"onAdd",value:function(t){return this.map=t,this.map.on("load",this.updateBound),this.map.on("move",this.updateBound),this.map.on("click",this.onMapClickBound),this.map.loaded()&&this.update(),document.createElement("div")}},{key:"onRemove",value:function(){this.map&&(this.map.getSource(this.id)&&(this.map.removeLayer(this.id),this.map.removeSource(this.id)),this.map.off("load",this.updateBound),this.map.off("move",this.updateBound),this.map.off("click",this.onMapClickBound),this.map=void 0)}},{key:"update",value:function(){if(this.map){var t=[];this.active&&(t=function(t,i,e,r){var o,n=Math.ceil(2*u([0,0],[180,0],{units:r})),a=Math.floor(n/i),s=function(t,i,e){var r=u(t,i,e);return Math.abs(i[0]-t[0])>=180?n-r:r},c=[],d=t[0],f=t[1],l=t[2],m=t[3],p=(d<0?-1:1)*s([0,0],[d,0],{units:r}),y=(f<0?-1:1)*s([0,0],[0,f],{units:r}),g=Math.ceil(p/i)*i,v=Math.ceil(y/e)*e,M=[h([0,0],g,90,{units:r}).geometry.coordinates[0],h([0,0],v,0,{units:r}).geometry.coordinates[1]],b=s([d,0],[l,0],{units:r}),w=s([0,f],[0,m],{units:r}),k=Math.min(Math.ceil(b/i),a),A=Math.ceil(w/e);o=M;for(var E=0;E<k;E++){var x={type:"Feature",geometry:{type:"LineString",coordinates:[[o[0],f],[o[0],m]]},properties:{}};c.push(x),o=[h([o[0],0],i,90,{units:r}).geometry.coordinates[0],o[1]]}o=M;for(var C=0;C<A;C++){var B={type:"Feature",geometry:{type:"LineString",coordinates:[[d,o[1]],[l,o[1]]]},properties:{}};c.push(B),o=[o[0],h([0,o[1]],e,0,{units:r}).geometry.coordinates[1]]}return c}(this.bbox,this.config.gridWidth,this.config.gridHeight,this.config.units));var i,e=this.map.getSource(this.id);e?e.setData({type:"FeatureCollection",features:t}):(this.map.addSource(this.id,{type:"geojson",data:{type:"FeatureCollection",features:t}}),this.map.addLayer({id:this.id,source:this.id,type:"line",paint:null!==(i=this.config.paint)&&void 0!==i?i:{}}))}}},{key:"active",get:function(){var t,i;if(!this.map)return!1;var e=null!==(t=this.config.minZoom)&&void 0!==t?t:0,r=null!==(i=this.config.maxZoom)&&void 0!==i?i:22,o=this.map.getZoom();return e<=o&&o<r}},{key:"bbox",get:function(){if(!this.map)throw new Error("Invalid state");var t=this.map.getBounds();return t.getEast()-t.getWest()>=360&&t.setNorthEast([t.getWest()+360,t.getNorth()]),t.toArray().flat()}},{key:"onMapClick",value:function(t){if(this.map&&this.active){var i={bbox:function(t,i,e,r){var o=Math.ceil(2*u([0,0],[180,0],{units:r})),n=function(t,i,e){var r=u(t,i,e);return Math.abs(i[0]-t[0])>=180?o-r:r},a=(t[0]<0?-1:1)*n([0,0],[t[0],0],{units:r}),s=(t[1]<0?-1:1)*n([0,0],[0,t[1]],{units:r}),c=Math.floor(a/i)*i,d=Math.floor(s/e)*e,f=Math.ceil(a/i)*i,l=Math.ceil(s/e)*e;return[h([0,0],c,90,{units:r}).geometry.coordinates[0],h([0,0],d,0,{units:r}).geometry.coordinates[1],h([0,0],f,90,{units:r}).geometry.coordinates[0],h([0,0],l,0,{units:r}).geometry.coordinates[1]]}(t.lngLat.toArray(),this.config.gridWidth,this.config.gridWidth,this.config.units)};this.map.fire(c,i)}}}])&&i(e.prototype,r),o&&i(e,o),t}();t.GRID_CLICK_EVENT=c,t.Grid=f,t.randomString=d,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=maplibre-grid.min.js.map
